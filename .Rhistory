x <- 1
print(x)
x
msg <- "hello"
x <- 5
x
x <- 1:20
x
print(x)
x <- c(1+3i, 4+6i)
x
x <- vector("complex", 20)
x
y <- (1.7,"a")
y <- c(2, TRUE)
y <- c(1.7,"a")
y <- c(1+i,2.3, "a",FALSE)
y <- c(1+2i,2.3, "a",FALSE)
z <- 13:20
as.complex(z)
m <= matrix(3,5)
m <- matrix(3,5)
m
m <- matrix(nrow =2,ncol = 5)
m
dim(m)
attributes(m)
m <- matrix(1:20,nrow =2,ncol = 5)
m
dim(m) <- (5,2)
dim(m) <- c(5,2)
m
x <- c(1+i,2+i,3+2i)
x <- 1:10
y <- 20:25
cbind(x,y)
rbind(x,y)
x <- list(1+3,2.34,"hello", FALSE)
x
x <- list(1+3i,2.34,"hello", FALSE)
x
gender <- factor(c("Male","Male","Female","Other"))
gender
table(gender)
unclass(gender)
frame <- data.frame(foo <- c(1,2,3,4), bar <- c(1+i,2+2i,3+3i,4+i))
frame <- data.frame(foo <- c(1,2,3,4), bar <- c(T,T,T,F))
frame
frame <- data.frame(foo = c(1,2,3,4), bar = c(T,T,T,F))
frame
x
names(x)
names(x) <- c("foo","bar",norf","sorf)
names(x) <- c("foo","bar",norf","sorf"")
names(x) <- c("foo","bar",norf","sorf")
x <- rnorm(10)
x
x <- rnorm(10,20,2)
x
set.seed(20)
e <- rnorm(100,0,1)
x <- 1:100
y <- 1.5 - 3*x + e
plat(x,y)
plot(x,y)
e <- rnorm(100,0,50)
plot(x,y)
y <- 1.5 - 3*x + e
plot(x,y)
dev.off()
hist(y)
x <- rnorm(100)
y <- x + rnorm(100)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x,y)
par(las = 1)
plot(x,y)
x <- rnorm(100)
y <- x + rnorm(100)
plot(x, y)
x1 <- rnorm(10)
y1 <- rnorm(10)
points(x1, y1, col = "red")
pdf(file = "testRplot.pdf")
x <- rnorm(100)
hist(x)
dev.off()
dev.list()
library(xlsx)
a <- available.packages()
head(a)
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
library("jsonlite")
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsondata)
names(json$name)
names(jsondata$name)
content(jsondata$name)
jsondata(jsondata$name=="datasharing")
jsondata[jsondata$name=="datasharing",]
jsondata[jsondata$name=="datasharing",45]
?print.trllis
?print.trellis
library(lattice)
?print.trellis
?par
?splom
?trellis.par.set
library(datasets)
data(airquality)
library(ggplot2)
library(ggplot)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
sp <- sqrt((10 * 0.68^2 + 10 * 0.6^2) / (10 + 10 - 2))
-2 + c(-1,1) * qt(0.975,18) * sp * (2/10)^0.5
sp <- sqrt((9 * 0.68^2 + 9 * 0.6^2) / (10 + 10 - 2))
-2 + c(-1,1) * qt(0.975,18) * sp * (2/10)^0.5
-2 + c(-1,1) * qt(0.975,18) * (sp * (2/10))^0.5
sp <- sqrt((99 * 0.5^2 + 99 * 2^2) / (100 + 100 - 2))
2 + c(-1,1) * qt(0.975,198) * (sp * (2/100))^0.5
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2) / (9 + 9 - 2))
-4 + c(-1,1) * qt(0.975,16) * (sp * 2/9)^0.5
1100 + c(1,-1) * qt(0.975,8) * 30 / sqrt(8)
6/qt(0.975,8)
setwd("F:/Academic/Reproducible Research/Week 4")
source('F:/Academic/Reproducible Research/Week 4/peerassignment2.R')
str(all_data)
fatal <- aggregate(FATALITIES ~ EVTYPE, data=all_data, sum)
fatal
all_data <- all_data[!grep("Summary | SUMMARY",all_data$EVTYPE),]
fatal <- aggregate(FATALITIES ~ EVTYPE, data=all_data, sum)
str(all_data)
all_data <- read.csv("repdata-data-StormData.csv")
str(all_data)
clean_data <- all_data
clean_data$EVTYPE <- as.factor(tolower(as.character(all_data$EVTYPE)))
str(clean_data)
clean_data2 <- clean_data[grep("summary",clean_data$EVTYPE),]
str(clean_data2)
clean_data2
clean_data2 <- clean_data[!grep("summary",clean_data$EVTYPE),]
clean_data2
clean_data2 <- clean_data[grep("summary",clean_data$EVTYPE) == FALSE,]
clean_data2
clean_data2 <- clean_data[-grep("summary",clean_data$EVTYPE),]
clean_data2
str(clean_data2)
fatal <- aggregate(FATALITIES ~ EVTYPE, data = clean_data, sum)
fatal
injury <- aggregate(INJURIES ~ EVTYPE, data = clean_data, sum)
injury
fatal <- fatal[fatal$FATALITIES > 0,]
fatal
?order
fatal <- fatal[order(fatal$FATALITIES),]
fatal
fatal <- fatal[order(-fatal$FATALITIES),]
fatal
injury <- injury[order(-injury$INJURIES),]
injury
injury <- injury[injury$INJURIES > 0,]
injury
par <- mfrow(1,2)
par(mfrow=c(1,2))
plot(fatal$EVTYPE, fatal$FATALITIES)
fatal
plot(fatal$EVTYPE[1..10], fatal$FATALITIES[1..10])
plot(head(fatal$EVTYPE), head(fatal$FATALITIES)
)
plot(fatal$EVTYPE, fatal$FATALITIES, type = "l")
fatal
str(fatal)
plot(as.character(fatal$EVTYPE), fatal$FATALITIES, type = "l")
head(fatal)
hist(fatal$FATALITIES)
plot(as.character(fatal$EVTYPE), fatal$FATALITIES, type = "l")
plot(fatal$EVTYPE)
?plot
plot_fatal <- fatal[1..10]
plot_fatal <- fatal[1..10,]
plot_fatal <- head(fatal,10)
plot_fatal
plot(plot_fatal$EVTYPE,plot_fatal$FATALITIES)
plot(plot_fatal$EVTYPE,log(plot_fatal$FATALITIES))
fatal
fatal[1]
fatal[,1]
fatal[,2]
fatal[1,]
fatal[2,]
plot(fatal$EVTYPE,fatal$FATALITIES
)
plot(fatal$EVTYPE,fatal$FATALITIES,type="l")
?sort
plot_fatal <- sort(fatal$FATALITIES)
plot_fatal
plot_fatal <- sort(fatal$FATALITIES,decreasing=TRUE)
plot_fatal
plot(fatal$EVTYPE,plot_fatal)
plot(plot_fatal)
plot(plot_fatal,line="l")
plot(plot_fatal,type="l")
plot(plot[,1],plot_fatal,type="l")
plot(plot$EVTYPE,plot_fatal,type="l")
fatal$EVTYPE
plot(fatal$EVTYPE,plot_fatal,type="l")
?plot
barplot(fatal$FATALITIES)
?barplot
barplot(fatal$FATALITIES,names.arg=fatal$EVTYPE)
barplot(fatal$FATALITIES[1..5],names.arg=fatal$EVTYPE)
barplot(head(fatal$FATALITIES),names.arg=head(fatal$EVTYPE))
par(mfrow(1,1))
par(mfrow=c(1,1))
barplot(head(fatal$FATALITIES),names.arg=head(fatal$EVTYPE))
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10))
?barplot
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10))
?barplot
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=1.5)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=0.5)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=0.7)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=0.5)
par(las=2)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=0.5)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=1.5)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=1.5)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=1.0)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=0.8)
par(mar = c(6, 4, 4, 2))
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=0.8)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=1)
par(mar = c(10, 4, 4, 2))
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=1)
barplot(head(fatal$FATALITIES,10),names.arg=head(fatal$EVTYPE,10),cex.names=1,main = "Highest Fatalities for each Natural Disaster")
barplot(head(injury$INJURIES,10),names.arg=head(injury$EVTYPE,10),cex.names=1,main = "Highest Injuries for each Natural Disaster")
str(clean_data)
clean_data$DMG <- clean_data$PROPDMG[clean_data$PROPDMGEXP == "K"]*1000
str(clean_data$DMG)
clean_data$DMG <- clean_data$PROPDMG[as.character(clean_data$PROPDMGEXP) == "K"]*1000
clean_data$DMG <- 0
clean_data$DMG <- clean_data$PROPDMG[as.character(clean_data$PROPDMGEXP) == "K"]*1000
str(clean_data$DMG)
mean(clean_data$DMG)
clean_data$DMG <- ifelse(clean_data$PROPDMGEXP == "K", clean$PROPDMG*1000, clean$PROPDMG*1000000)
clean_data$DMG <- ifelse(clean_data$PROPDMGEXP == "K", clean_data$PROPDMG*1000, clean_data$PROPDMG*1000000)
str(clean_data$DMG)
str(clean_data)
damage <- aggregate(DMG ~ EVTYPE, data = clean_data,sum)
damage
damage <- damage[order(-damage$DMG)]
damage <- damage[order(-damage$DMG),]
damage
barplot(head(damage$DMG,10),names.arg=head(damage$DMG,10),cex.names=1,main = "Economic Damage for each Natural Disaster")
barplot(head(damage$DMG,10),names.arg=head(damage$EVTYPE,10),cex.names=1,main = "Economic Damage for each Natural Disaster")
fileName <- "repdata-data-StormData.csv.bz2"
con1 <- unz(fileName, filename="repdata-data-StormData.csv", open = "r")
unz(fileName, filename="repdata-data-StormData.csv", open = "r")
fileName <- "repdata-data-StormData.csv.bz2"
con1 <- unz(fileName, filename="repdata-data-StormData.csv", open = "r")
?unz
con <- bzfile(FileName)
con <- bzfile(fileName)
data <- read.csv(con)
str(data)
We then set all Event types into lower case and remove all summary information.
